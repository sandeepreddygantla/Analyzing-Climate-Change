[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "zscore",
        "importPath": "scipy.stats",
        "description": "scipy.stats",
        "isExtraImport": true,
        "detail": "scipy.stats",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Sequential",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "load_model",
        "importPath": "tensorflow.keras.models",
        "description": "tensorflow.keras.models",
        "isExtraImport": true,
        "detail": "tensorflow.keras.models",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "tensorflow.keras.layers",
        "description": "tensorflow.keras.layers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.layers",
        "documentation": {}
    },
    {
        "label": "Adam",
        "importPath": "tensorflow.keras.optimizers",
        "description": "tensorflow.keras.optimizers",
        "isExtraImport": true,
        "detail": "tensorflow.keras.optimizers",
        "documentation": {}
    },
    {
        "label": "MinMaxScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "mean_absolute_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "convert_to_datetime",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def convert_to_datetime(data, column='dt'):\n    data[column] = pd.to_datetime(data[column])\n    return data\n# Read datasets\ntry:\n    df = pd.read_csv('GlobalTemperatures.csv', parse_dates=['dt'])\nexcept FileNotFoundError:\n    logger.error(\"Error: File not found. Please make sure the file path is correct.\")\nexcept pd.errors.EmptyDataError:\n    logger.error(\"Error: The CSV file is empty or in an invalid format.\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "calculate_z_scores",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes\ndef find_unusual_changes(data, z_scores, threshold):\n    return data[abs(z_scores) > threshold]\n# Handle button click\nif submit_button:\n    try:\n        # Update session state variables\n        st.session_state.z_score_threshold = z_score_threshold",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "find_unusual_changes",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def find_unusual_changes(data, z_scores, threshold):\n    return data[abs(z_scores) > threshold]\n# Handle button click\nif submit_button:\n    try:\n        # Update session state variables\n        st.session_state.z_score_threshold = z_score_threshold\n        st.session_state.sequence_length = sequence_length\n        st.session_state.batch_size = batch_size\n        st.session_state.epochs = epochs",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nos.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'\n# Function to convert 'dt' column to datetime format\ndef convert_to_datetime(data, column='dt'):\n    data[column] = pd.to_datetime(data[column])\n    return data\n# Read datasets\ntry:\n    df = pd.read_csv('GlobalTemperatures.csv', parse_dates=['dt'])\nexcept FileNotFoundError:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "os.environ['TF_ENABLE_ONEDNN_OPTS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'\n# Function to convert 'dt' column to datetime format\ndef convert_to_datetime(data, column='dt'):\n    data[column] = pd.to_datetime(data[column])\n    return data\n# Read datasets\ntry:\n    df = pd.read_csv('GlobalTemperatures.csv', parse_dates=['dt'])\nexcept FileNotFoundError:\n    logger.error(\"Error: File not found. Please make sure the file path is correct.\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "df = convert_to_datetime(df)\nglobal_temperatures_df = df.dropna(subset=['LandAverageTemperature'])\n# Streamlit App\nst.title('Climate Change Alert System')\n# Default parameters\ndefault_z_score_threshold = 2.0\ndefault_sequence_length = 10\ndefault_batch_size = 32\ndefault_epochs = 50\n# Check if session state variables are already initialized",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "global_temperatures_df",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "global_temperatures_df = df.dropna(subset=['LandAverageTemperature'])\n# Streamlit App\nst.title('Climate Change Alert System')\n# Default parameters\ndefault_z_score_threshold = 2.0\ndefault_sequence_length = 10\ndefault_batch_size = 32\ndefault_epochs = 50\n# Check if session state variables are already initialized\ntry:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "default_z_score_threshold",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "default_z_score_threshold = 2.0\ndefault_sequence_length = 10\ndefault_batch_size = 32\ndefault_epochs = 50\n# Check if session state variables are already initialized\ntry:\n    if 'z_score_threshold' not in st.session_state:\n        st.session_state.z_score_threshold = default_z_score_threshold\n    if 'sequence_length' not in st.session_state:\n        st.session_state.sequence_length = default_sequence_length",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "default_sequence_length",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "default_sequence_length = 10\ndefault_batch_size = 32\ndefault_epochs = 50\n# Check if session state variables are already initialized\ntry:\n    if 'z_score_threshold' not in st.session_state:\n        st.session_state.z_score_threshold = default_z_score_threshold\n    if 'sequence_length' not in st.session_state:\n        st.session_state.sequence_length = default_sequence_length\n    if 'batch_size' not in st.session_state:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "default_batch_size",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "default_batch_size = 32\ndefault_epochs = 50\n# Check if session state variables are already initialized\ntry:\n    if 'z_score_threshold' not in st.session_state:\n        st.session_state.z_score_threshold = default_z_score_threshold\n    if 'sequence_length' not in st.session_state:\n        st.session_state.sequence_length = default_sequence_length\n    if 'batch_size' not in st.session_state:\n        st.session_state.batch_size = default_batch_size",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "default_epochs",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "default_epochs = 50\n# Check if session state variables are already initialized\ntry:\n    if 'z_score_threshold' not in st.session_state:\n        st.session_state.z_score_threshold = default_z_score_threshold\n    if 'sequence_length' not in st.session_state:\n        st.session_state.sequence_length = default_sequence_length\n    if 'batch_size' not in st.session_state:\n        st.session_state.batch_size = default_batch_size\n    if 'epochs' not in st.session_state:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "z_score_threshold",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "z_score_threshold = st.sidebar.slider('Z-Score Threshold', min_value=0.1, max_value=5.0, value=st.session_state.z_score_threshold)\nsequence_length = st.sidebar.slider('Sequence Length for Forecasting', min_value=5, max_value=50, value=st.session_state.sequence_length)\nbatch_size = st.sidebar.slider('Batch Size for LSTM', min_value=16, max_value=128, value=st.session_state.batch_size)\nepochs = st.sidebar.slider('Number of Epochs', min_value=10, max_value=100, value=st.session_state.epochs)\nsubmit_button = st.sidebar.button('Submit')\n# Convert the 'dt' column to datetime format\nglobal_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "sequence_length",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "sequence_length = st.sidebar.slider('Sequence Length for Forecasting', min_value=5, max_value=50, value=st.session_state.sequence_length)\nbatch_size = st.sidebar.slider('Batch Size for LSTM', min_value=16, max_value=128, value=st.session_state.batch_size)\nepochs = st.sidebar.slider('Number of Epochs', min_value=10, max_value=100, value=st.session_state.epochs)\nsubmit_button = st.sidebar.button('Submit')\n# Convert the 'dt' column to datetime format\nglobal_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "batch_size",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "batch_size = st.sidebar.slider('Batch Size for LSTM', min_value=16, max_value=128, value=st.session_state.batch_size)\nepochs = st.sidebar.slider('Number of Epochs', min_value=10, max_value=100, value=st.session_state.epochs)\nsubmit_button = st.sidebar.button('Submit')\n# Convert the 'dt' column to datetime format\nglobal_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "epochs = st.sidebar.slider('Number of Epochs', min_value=10, max_value=100, value=st.session_state.epochs)\nsubmit_button = st.sidebar.button('Submit')\n# Convert the 'dt' column to datetime format\nglobal_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes\ndef find_unusual_changes(data, z_scores, threshold):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "submit_button",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "submit_button = st.sidebar.button('Submit')\n# Convert the 'dt' column to datetime format\nglobal_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes\ndef find_unusual_changes(data, z_scores, threshold):\n    return data[abs(z_scores) > threshold]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "global_temperatures_df['dt']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "global_temperatures_df['dt'] = pd.to_datetime(global_temperatures_df['dt'])\nglobal_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes\ndef find_unusual_changes(data, z_scores, threshold):\n    return data[abs(z_scores) > threshold]\n# Handle button click\nif submit_button:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "global_aggregated",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "global_aggregated = global_temperatures_df.resample('Y', on='dt').mean()\n# Define a function to calculate z-scores\ndef calculate_z_scores(data):\n    return zscore(data['LandAverageTemperature'])\n# Define a function to identify unusual changes\ndef find_unusual_changes(data, z_scores, threshold):\n    return data[abs(z_scores) > threshold]\n# Handle button click\nif submit_button:\n    try:",
        "detail": "app",
        "documentation": {}
    }
]